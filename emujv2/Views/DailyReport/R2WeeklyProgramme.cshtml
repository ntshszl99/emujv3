
@{
    ViewBag.Title = "R2WeeklyProgramme";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="app-content main-content">
    <div class="side-app">
        <div class="container-fluid main-container">
            <!--Page header-->
            <div class="page-header">
                <div class="page-leftheader">
                    <h4 class="page-title">Weekly Programme (R2)</h4>
                </div>
            </div>
            <div class="" id="contentAdmin">
                <div class="card">
                    <div class="card-body">
                        <div class="mb-3 m-0">
                            <div class="row">
                                @*<div class="col-4">
                                    <label class="mt-3 form-label">KMUJ</label>
                                    <select id="kmuj" class="form-control form-select select2">
                                        <option value="-0">Select KMUJ</option>
                                    </select>
                                </div>
                                <div class="col-4">
                                    <label class="mt-3 form-label">Section</label>
                                    <select id="section" class="form-control form-select select2">
                                        <option value="-0">Select Section</option>
                                    </select>
                                </div>
                                <div class="col-4">
                                    <label class="mt-3 form-label">Date (From - To)</label>
                                    <div class="input-group">
                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class=" mt-1 mb-1 fa fa-solid fa fa-calendar font-20"></i></span>
                                        </div>
                                        <input type="text" class="form-control" id="txtDate" name="txtDate" required="required" autocomplete="off" />
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="col-lg-12">
                                        <div class="col 4">
                                            <div id="selectedValues" class="mb-3"></div>
                                        </div>*@
                                        <div class="table-responsive table-lg">
                                            <table id="tableRep" class="table table-bordered text-nowrap hover">
                                                <thead></thead>
                                                <tbody></tbody>
                                            </table>
                                        </div>

                                        <div class="row mt-5">
                                            <h5>Total Man - Hours for the Gangs = <span id="totalHours"></span></h5>
                                            <h5>On Track Works = </h5>
                                            <h5>Off Track Works = <span id="totalOffTrackWorks"></span></h5>
                                            <h5>Others = <span id="totalTimeForSpecificCategories"></span></h5>
                                            <h5>Total = </h5>
                                            <h5>Inspected by RE / CPWI on  </h5>
                                        </div>
                                    @*</div>*@
                                @*</div>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script src="~/assets/scripts/dashboard.js"></script>
    <script src="~/assets/plugins/daterangepicker/daterangepicker.js"></script>
    <script src="~/assets/plugins/select2/select2.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            checkSess();
            listSection();
            listKMUJ();
            listReports();


        });

        function listSection() {
            $.ajax({
                url: linkDepan + "GetSectionList",
                dataType: "json",
                beforeSend: function (request) {
                    request.setRequestHeader("Token", localStorage.getItem('main'));
                },
                success: function (data) {
                    if (data.length >= 1) {
                        auxArr = [];
                        $.each(data, function (index, value) {
                            auxArr[index] = "<option value='" + value.section_id + "'>" + value.section_name + "</option>";
                        });
                        $('#section').append(auxArr.join(''));
                    } else {
                        $("#section").addClass(" is-invalid");
                    }
                },
                error: function (xhr) {
                    swarning();
                },
                complete: function () { }
            });
        }

        function listKMUJ() {
            $.ajax({
                url: linkDepan + "KMUJList",
                dataType: "json",
                beforeSend: function (request) {
                    request.setRequestHeader("Token", localStorage.getItem('main'));
                },
                success: function (data) {
                    if (data.length >= 1) {
                        auxArr = [];
                        $.each(data, function (index, value) {
                            auxArr[index] = "<option value='" + value.kmuj_id + "'>" + value.kmuj_name + "</option>";
                        });
                        $('#kmuj').append(auxArr.join(''));
                    } else {
                        $("#kmuj").addClass(" is-invalid");
                    }
                },
                error: function (xhr) {
                    swarning();
                },
                complete: function () { }
            });
        }

        function listReports() {
            $.ajax({
                url: linkDepan + "GetKerja",
                type: 'GET',
                dataType: 'json',
                data: {},
                beforeSend: function (request) {
                    request.setRequestHeader("Token", localStorage.getItem('main'));
                },
                success: function (data) {
                    console.log("Raw Data Received from Server:", data);

                    if (!data || !Array.isArray(data) || !data.length) {
                        console.error('No valid data returned from the server.');
                        return;
                    }

                    let finalData = [];  // Initialize finalData as an empty array
                    let uniqueDates = new Set();  // Set to hold unique dates

                    let prevWorkCatId = null;  // To store the previous work_cat_id
                    let prevWorkCatName = null;  // To store the previous work_cat_name

                    // Process data and keep all rows as they are, with merging for same work_cat_id and work_cat_name
                    data.forEach(item => {
                        let row = {
                            work_cat_id: item.work_cat_id,
                            work_cat_name: item.work_cat_name,
                            work_name: item.work_name,
                            TotalTime: item.TotalTime || 0
                        };

                        // Add all the date-based fields into the row
                        Object.keys(item).forEach(dateKey => {
                            if (dateKey !== "work_cat_id" && dateKey !== "work_cat_name" && dateKey !== "work_name" && dateKey !== "TotalTime") {
                                row[dateKey] = item[dateKey] || 0;  // Default to 0 if no value exists for the date
                                uniqueDates.add(dateKey);  // Add date to uniqueDates set
                            }
                        });

                        // If the current work_cat_id and work_cat_name are the same as the previous row, merge them
                        if (prevWorkCatId === item.work_cat_id && prevWorkCatName === item.work_cat_name) {
                            // Merge the current row with the previous one by removing the work_cat_id and work_cat_name
                            row.work_cat_id = null;  // Set it to null so it can be merged (i.e., it won't be displayed)
                            row.work_cat_name = null;  // Similarly, set work_cat_name to null
                        } else {
                            prevWorkCatId = item.work_cat_id;  // Update the previous work_cat_id
                            prevWorkCatName = item.work_cat_name;  // Update the previous work_cat_name
                        }

                        finalData.push(row);  // Add the row to the finalData array
                    });

                    let sortedDates = Array.from(uniqueDates).sort(); // Sort the dates

                    // Calculate the totals for each date
                    let totalRow = {
                        work_cat_id: 'Total',
                        work_cat_name: 'Total',
                        work_name: '',
                        TotalTime: 0
                    };

                    sortedDates.forEach(date => {
                        let dateSum = finalData.reduce((sum, row) => sum + (parseFloat(row[date]) || 0), 0);
                        totalRow[date] = dateSum.toFixed(2);  // Store the total sum for the date
                        totalRow.TotalTime += dateSum;  // Add to the total time sum
                    });

                    finalData.push(totalRow);  // Add the total row at the end

                    // Now calculate "Total Man-Hours for the Gangs"
                    let totalManHoursForGangs = 0;
                    finalData.forEach(row => {
                        // We sum the TotalTime values for work categories that have a value
                        if (row.work_cat_name !== 'Total') { // Exclude the "Total" row itself
                            totalManHoursForGangs += row.TotalTime || 0;
                        }
                    });

                    // Display the total time for "Total Man-Hours for the Gangs"
                    document.getElementById("totalHours").innerText = totalManHoursForGangs.toFixed(2);

                    // Calculate the total for "Off Track Works" (you may use work_cat_name or work_cat_id to filter)
                    let offTrackWorksTotal = 0;
                    finalData.forEach(row => {
                        if (row.work_cat_name === 'Off Track Works') {
                            offTrackWorksTotal += row.TotalTime || 0;
                        }
                    });

                    // Display the total "Off Track Works"
                    document.getElementById("totalOffTrackWorks").innerText = offTrackWorksTotal.toFixed(2);

                    // Now calculate "Total Time for Categories 1, 14, 15, 16, 17"
                    let specificCategories = [1, 14, 15, 16, 17];
                    let totalTimeForSpecificCategories = 0;

                    finalData.forEach(row => {
                        if (specificCategories.includes(row.work_cat_id)) {
                            totalTimeForSpecificCategories += row.TotalTime;
                        }
                    });

                    // Display the total time for these specific categories
                    document.getElementById("totalTimeForSpecificCategories").innerText = totalTimeForSpecificCategories.toFixed(2);

                    // Define base columns for DataTable
                    let columns = [
                        { data: "work_cat_id", title: "No" },  // Add the "No" column here
                        { data: "work_cat_name", title: "Category" },
                        { data: "work_name", title: "Work Description" }
                    ];

                    // Add dynamic columns for dates
                    sortedDates.forEach(date => {
                        columns.push({
                            data: date,  // Use the date as the column data
                            defaultContent: "0",  // Default value for missing dates
                            title: date  // Set column header to the date
                        });
                    });

                    // Add the "TotalTime" column at the end
                    columns.push({ data: "TotalTime", title: "Total Time" });

                    // Initialize the DataTable
                    let table = $('#tableRep').DataTable({
                        ordering: false,
                        paging: false,
                        dom: 'Bfrtip',
                        buttons: ['copy', 'csv', 'excel', 'pdf', 'print'],
                        responsive: true,
                        data: finalData,  // Pass the raw data (without merging rows)
                        columns: columns,  // Use the dynamically defined columns
                        createdRow: function (row, data, dataIndex) {
                            // Ensure the "No" column reflects the sequential "work_cat_id"
                            const rowNumber = data.work_cat_id;  // Use work_cat_id as the sequential number
                            $('td', row).eq(0).html(rowNumber);  // Use the rowNumber for the "No" column
                            $('td', row).addClass('text-nowrap align-middle');

                            // Merge the cells for work_cat_name and work_cat_id if they are null
                            if (data.work_cat_id === null) {
                                $('td', row).eq(1).html('');  // Clear the "Category" column cell
                            }
                        },
                        drawCallback: function (settings) {
                            console.log("drawCallback triggered");

                            // Helper function to merge cells using rowspan
                            function mergeCells(startRow, endRow, colIndex, mergedContent = null) {
                                console.log(`Merging cells from ${startRow} to ${endRow} in column ${colIndex}`);
                                let firstCell = $(table.cell(startRow, colIndex).node());
                                let content = mergedContent !== null ? mergedContent : firstCell.text();
                                firstCell.attr('rowspan', endRow - startRow + 1).html(content);

                                // Remove content from the other cells in the merged range
                                for (let i = startRow + 1; i <= endRow; i++) {
                                    $(table.row(i).node()).find('td:eq(' + colIndex + ')').empty();
                                }
                            }

                            // Merge the rows based on work_cat_name
                            let currentRow = 0;
                            let startRow = -1;
                            let lastWorkCatId = null;
                            let lastWorkCatName = null;

                            finalData.forEach((row, index) => {
                                if (row.work_cat_id !== lastWorkCatId || row.work_cat_name !== lastWorkCatName) {
                                    // If there's a change in work_cat_id or work_cat_name, merge previous rows
                                    if (startRow !== -1 && index - startRow > 1) {
                                        mergeCells(startRow, index - 1, 1); // Merge the category column (index 1)
                                        mergeCells(startRow, index - 1, 0, row.work_cat_id); // Merge the id column (index 0)
                                    }
                                    startRow = index; // Set new starting row
                                }
                                lastWorkCatId = row.work_cat_id;
                                lastWorkCatName = row.work_cat_name;
                            });

                            // Handle the last merge for remaining rows
                            if (startRow !== -1 && finalData.length - startRow > 1) {
                                mergeCells(startRow, finalData.length - 1, 1);
                                mergeCells(startRow, finalData.length - 1, 0, finalData[startRow].work_cat_id);
                            }
                        }
                    });
                },
                error: function (xhr) {
                    swarning();
                },
                complete: function () { }
            });
        }





    </script>
}




